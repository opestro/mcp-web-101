<%- include('layout', { body: `
<div class="max-w-4xl mx-auto">
    <!-- Back to Home -->
    <a href="/" class="inline-flex items-center text-blue-500 hover:text-blue-600 mb-8">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        Back to Home
    </a>

    <h1 class="text-4xl font-bold text-gray-800 mb-8">Building Your First MCP Server 🚀</h1>

    <div class="space-y-12">
        <!-- Basic Server Setup -->
        <div class="bg-white shadow-md rounded-lg p-6 relative">
            <div class="step-number absolute -left-4 top-6">1</div>
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Basic Server Setup ⚡</h2>
            <p class="text-gray-600 mb-4">Create a new file called <code class="bg-gray-100 px-2 py-1 rounded">index.js</code> with the following code:</p>
            <div class="bg-gray-100 p-4 rounded-md relative group">
                <button class="absolute right-2 top-2 text-gray-400 hover:text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity" onclick="copyCode(this)">
                    📋 Copy
                </button>
                <pre><code class="language-javascript">
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

const server = new McpServer({
  name: "My First MCP Server",
  version: "1.0.0"
}, {
  capabilities: {
    resources: {},  // Enable resources support
    tools: {}       // Enable tools support
  }
});

const transport = new StdioServerTransport();
await server.connect(transport);</code></pre>
            </div>
            <div class="mt-4 bg-blue-50 p-4 rounded-md">
                <p class="text-blue-800">
                    <span class="font-bold">💡 Note:</span> The server configuration object specifies which capabilities your server supports. You can enable resources, tools, and other features as needed.
                </p>
            </div>
        </div>

        <!-- Resources -->
        <div class="bg-white shadow-md rounded-lg p-6 relative">
            <div class="step-number absolute -left-4 top-6">2</div>
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Adding Resources 📚</h2>
            <p class="text-gray-600 mb-4">Resources allow your server to expose data that can be used as context for LLM interactions:</p>
            <div class="bg-gray-100 p-4 rounded-md relative group">
                <button class="absolute right-2 top-2 text-gray-400 hover:text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity" onclick="copyCode(this)">
                    📋 Copy
                </button>
                <pre><code class="language-javascript">
// List available resources
server.setRequestHandler(ListResourcesRequestSchema, async () => {
  return {
    resources: [
      {
        uri: "file:///data/config.json",
        name: "Configuration File",
        mimeType: "application/json"
      }
    ]
  };
});

// Read resource contents
server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
  const uri = request.params.uri;
  
  if (uri === "file:///data/config.json") {
    return {
      contents: [
        {
          uri,
          mimeType: "application/json",
          text: JSON.stringify({ key: "value" })
        }
      ]
    };
  }
  
  throw new Error("Resource not found");
});</code></pre>
            </div>
            <div class="mt-4 bg-blue-50 p-4 rounded-md">
                <p class="text-blue-800">
                    <span class="font-bold">💡 Note:</span> Resources can be static files, dynamic data, or templates. They're perfect for providing context to LLMs.
                </p>
            </div>
        </div>

        <!-- Tools -->
        <div class="bg-white shadow-md rounded-lg p-6 relative">
            <div class="step-number absolute -left-4 top-6">3</div>
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Implementing Tools 🛠️</h2>
            <p class="text-gray-600 mb-4">Tools are functions that LLMs can call to perform actions. Here's how to implement them:</p>
            <div class="bg-gray-100 p-4 rounded-md relative group">
                <button class="absolute right-2 top-2 text-gray-400 hover:text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity" onclick="copyCode(this)">
                    📋 Copy
                </button>
                <pre><code class="language-javascript">
// Simple calculator tool
server.tool(
  "calculate",
  {
    operation: z.enum(["add", "subtract", "multiply", "divide"])
      .describe("The mathematical operation to perform"),
    x: z.number().describe("First number"),
    y: z.number().describe("Second number")
  },
  async ({ operation, x, y }) => {
    let result;
    switch (operation) {
      case "add": result = x + y; break;
      case "subtract": result = x - y; break;
      case "multiply": result = x * y; break;
      case "divide": 
        if (y === 0) throw new Error("Division by zero");
        result = x / y;
        break;
    }

    return {
      content: [
        {
          type: "text",
          text: \`Result of \${x} \${operation} \${y} = \${result}\`
        }
      ]
    };
  }
);

// Weather tool with error handling
server.tool(
  "getWeather",
  {
    city: z.string().describe("City name"),
    country: z.string().optional().describe("Country code")
  },
  async ({ city, country }) => {
    try {
      // Implementation would go here
      const weather = await fetchWeather(city, country);
      
      return {
        content: [
          {
            type: "text",
            text: \`Weather in \${city}: \${weather.description}, \${weather.temperature}°C\`
          }
        ]
      };
    } catch (error) {
      console.error(\`Weather API error: \${error.message}\`);
      return {
        content: [
          {
            type: "text",
            text: \`Error fetching weather: \${error.message}\`
          }
        ]
      };
    }
  }
);</code></pre>
            </div>
            <div class="mt-4 bg-blue-50 p-4 rounded-md">
                <p class="text-blue-800">
                    <span class="font-bold">💡 Note:</span> Tools should have clear parameter validation, good error handling, and return meaningful responses.
                </p>
            </div>
        </div>

        <!-- Advanced Features -->
        <div class="bg-white shadow-md rounded-lg p-6 relative">
            <div class="step-number absolute -left-4 top-6">4</div>
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Advanced Features 🚀</h2>
            <p class="text-gray-600 mb-4">MCP supports advanced features like resource templates and dynamic updates:</p>
            <div class="bg-gray-100 p-4 rounded-md relative group">
                <button class="absolute right-2 top-2 text-gray-400 hover:text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity" onclick="copyCode(this)">
                    📋 Copy
                </button>
                <pre><code class="language-javascript">
// Resource template example
server.setRequestHandler(ListResourcesRequestSchema, async () => {
  return {
    resources: [],
    templates: [
      {
        uriTemplate: "user://{userId}/profile",
        name: "User Profile",
        description: "Access user profile data"
      }
    ]
  };
});

// Resource update notifications
function notifyResourceChanged(uri) {
  server.sendNotification("notifications/resources/updated", {
    uri
  });
}

// Subscribe to resource updates
server.setRequestHandler(SubscribeResourceRequestSchema, async (request) => {
  const { uri } = request.params;
  // Implementation for subscription
  return { success: true };
});</code></pre>
            </div>
        </div>

        <!-- Complete Example -->
        <div class="bg-white shadow-md rounded-lg p-6 relative last-step">
            <div class="step-number absolute -left-4 top-6">5</div>
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Complete WooCommerce Example 🛍️</h2>
            <p class="text-gray-600 mb-4">Here's a real-world example combining tools and resources:</p>
            <div class="bg-gray-100 p-4 rounded-md relative group">
                <button class="absolute right-2 top-2 text-gray-400 hover:text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity" onclick="copyCode(this)">
                    📋 Copy
                </button>
                <pre><code class="language-javascript">
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import axios from "axios";
import { z } from "zod";

const server = new McpServer({
  name: "WooCommerce Service",
  version: "1.0.0"
}, {
  capabilities: {
    resources: {},
    tools: {}
  }
});

// Tool: Get Recent Orders
server.tool(
  "getRecentOrders",
  {
    status: z.string().optional()
      .describe("Filter orders by status (e.g., processing, completed)"),
    limit: z.number().optional()
      .describe("Number of orders to return"),
    after: z.string().optional()
      .describe("Get orders after this date (YYYY-MM-DD)"),
    before: z.string().optional()
      .describe("Get orders before this date (YYYY-MM-DD)")
  },
  async ({ status, limit, after, before }) => {
    try {
      const orders = await fetchOrders({ status, limit, after, before });
      return {
        content: [
          {
            type: "text",
            text: formatOrders(orders)
          }
        ]
      };
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: \`Error: \${error.message}\`
          }
        ]
      };
    }
  }
);

// Resource: Order Statistics
server.setRequestHandler(ListResourcesRequestSchema, async () => {
  return {
    resources: [
      {
        uri: "woo://stats/daily",
        name: "Daily Order Statistics",
        mimeType: "application/json"
      }
    ]
  };
});

const transport = new StdioServerTransport();
await server.connect(transport);</code></pre>
            </div>
        </div>

        <!-- Navigation -->
        <div class="flex justify-between items-center mt-12">
            <a href="/installation" class="inline-flex items-center text-gray-500 hover:text-blue-500 transition duration-300">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
                Previous: Installation
            </a>
            <a href="https://modelcontextprotocol.io/docs" target="_blank" class="inline-flex items-center bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 transition duration-300">
                Official Documentation
                <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
            </a>
        </div>
    </div>
</div>

<!-- Syntax Highlighting -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism-tomorrow.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-javascript.min.js"></script>

<!-- Copy to Clipboard Script -->
<script>
function copyCode(button) {
    const codeBlock = button.nextElementSibling.querySelector('code');
    const text = codeBlock.innerText;
    
    navigator.clipboard.writeText(text).then(() => {
        const originalText = button.innerText;
        button.innerText = '✅ Copied!';
        setTimeout(() => {
            button.innerText = originalText;
        }, 2000);
    });
}

// Initialize Prism.js after the page loads
document.addEventListener('DOMContentLoaded', () => {
    Prism.highlightAll();
});
</script>
` }) %> 